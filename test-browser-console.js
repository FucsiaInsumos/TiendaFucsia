/**
 * üß™ SCRIPT DE PRUEBA R√ÅPIDA - EJECUTAR EN CONSOLA DEL NAVEGADOR
 * 
 * Copia y pega este c√≥digo en la consola del navegador (F12)
 * cuando est√©s en tu aplicaci√≥n de producci√≥n.
 * 
 * INSTRUCCIONES:
 * 1. Abre tu aplicaci√≥n en producci√≥n
 * 2. Abre DevTools (F12)
 * 3. Ve a la pesta√±a Console
 * 4. Pega este c√≥digo completo
 * 5. Presiona Enter
 * 6. Observa los resultados
 */

(async function testReceiveOrderFix() {
  console.log('\n' + '='.repeat(60));
  console.log('üß™ TEST: Verificar Fix de Recepci√≥n Parcial');
  console.log('='.repeat(60) + '\n');

  try {
    // Obtener token del localStorage
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('‚ùå No hay token de autenticaci√≥n. Debes iniciar sesi√≥n primero.');
      return;
    }

    const baseURL = 'https://tiendafucsia.up.railway.app';
    
    // Crear funci√≥n para hacer requests
    const api = async (method, url, data = null) => {
      const options = {
        method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      };
      
      if (data) {
        options.body = JSON.stringify(data);
      }
      
      const response = await fetch(baseURL + url, options);
      return response.json();
    };

    // 1. Obtener √≥rdenes
    console.log('üìã Obteniendo √≥rdenes...');
    const ordersData = await api('GET', '/purchase/orders?status=&proveedorId=&startDate=&endDate=');
    const orders = ordersData.data || ordersData;

    if (!orders || orders.length === 0) {
      console.warn('‚ö†Ô∏è No hay √≥rdenes disponibles');
      return;
    }

    // Buscar orden con items pendientes
    const testOrder = orders.find(order => 
      (order.status === 'pendiente' || order.status === 'parcial') &&
      order.items &&
      order.items.some(item => (item.cantidadRecibida || 0) < item.cantidad)
    );

    if (!testOrder) {
      console.warn('‚ö†Ô∏è No hay √≥rdenes con items pendientes');
      console.log('\nüí° RECOMENDACI√ìN: Crea una orden de prueba con 3 items');
      console.log('   Luego recibe PARCIALMENTE solo 1 o 2 items');
      return;
    }

    console.log('\n‚úÖ Orden encontrada:', testOrder.orderNumber);
    console.log('üìä Estado actual:', testOrder.status);
    console.log('üì¶ Items:');
    
    testOrder.items.forEach(item => {
      const recibida = item.cantidadRecibida || 0;
      const total = item.cantidad;
      const pendiente = total - recibida;
      console.log(`   ‚Ä¢ ${item.productName}: ${recibida}/${total} ${pendiente > 0 ? '‚è≥ PENDIENTE' : '‚úÖ COMPLETO'}`);
    });

    // Encontrar item con cantidad pendiente
    const itemPendiente = testOrder.items.find(item => 
      (item.cantidadRecibida || 0) < item.cantidad
    );

    if (!itemPendiente) {
      console.warn('‚ö†Ô∏è Todos los items est√°n completos');
      return;
    }

    const pendiente = itemPendiente.cantidad - (itemPendiente.cantidadRecibida || 0);
    const aRecibir = Math.max(1, Math.floor(pendiente / 2)); // Recibir la mitad

    console.log('\nüîÑ Simulando recepci√≥n PARCIAL:');
    console.log(`   Item: ${itemPendiente.productName}`);
    console.log(`   Pendiente: ${pendiente}`);
    console.log(`   A recibir: ${aRecibir} (${Math.round(aRecibir/pendiente*100)}%)`);
    console.log(`   Quedar√° pendiente: ${pendiente - aRecibir}`);

    // Enviar recepci√≥n
    const receiveData = {
      receivedItems: [{
        itemId: itemPendiente.id,
        cantidadRecibida: aRecibir,
        updatePrices: false,
        newPrices: null
      }],
      notes: 'Test de recepci√≥n parcial'
    };

    console.log('\nüì§ Enviando recepci√≥n al servidor...');
    const response = await api('POST', `/purchase/orders/${testOrder.id}/receive`, receiveData);

    // Verificar respuesta
    console.log('\n' + '='.repeat(60));
    console.log('üì¨ RESPUESTA DEL SERVIDOR:');
    console.log('='.repeat(60));
    console.log('Estado anterior:', testOrder.status);
    console.log('Estado nuevo:', response.data?.newStatus);
    
    // AN√ÅLISIS CR√çTICO
    console.log('\nüîç AN√ÅLISIS:');
    
    const todosCompletos = testOrder.items.every(item => {
      if (item.id === itemPendiente.id) {
        const nuevaRecibida = (item.cantidadRecibida || 0) + aRecibir;
        return nuevaRecibida >= item.cantidad;
      }
      return (item.cantidadRecibida || 0) >= item.cantidad;
    });

    const estadoEsperado = todosCompletos ? 'completada' : 'parcial';
    const estadoRecibido = response.data?.newStatus;

    if (estadoRecibido === estadoEsperado) {
      console.log(`%c‚úÖ CORRECTO: Estado es "${estadoRecibido}"`, 'color: green; font-weight: bold');
      if (estadoRecibido === 'parcial') {
        console.log('%c‚úÖ El fix est√° funcionando - La orden NO se marc√≥ como completada', 'color: green; font-weight: bold');
      }
    } else {
      console.log(`%c‚ùå ERROR: Estado es "${estadoRecibido}" pero deber√≠a ser "${estadoEsperado}"`, 'color: red; font-weight: bold');
      if (estadoRecibido === 'completada' && estadoEsperado === 'parcial') {
        console.log('%c‚ùå BUG: Orden marcada como completada cuando es PARCIAL', 'color: red; font-weight: bold');
        console.log('%c‚ùå El servidor NO tiene el fix del reload()', 'color: red; font-weight: bold');
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log(response.data?.isCompleted ? '‚úÖ Orden COMPLETADA' : '‚è≥ Orden PARCIAL');
    console.log('='.repeat(60) + '\n');

  } catch (error) {
    console.error('‚ùå ERROR:', error.message);
    console.error(error);
  }
})();
